{
	// ---------- for lax json
	function flatten(a) {
		if (a instanceof Array) {
			var result = "";
			for (var i=0; i < a.length; i++) {
				result += flatten(a[i]);
			}
			return result;
		} else {
			return "" + a;
		}
	}

	// Special object as null replacement
	var NULL_OBJECT = {};

	function getValue(value) {
		return value === NULL_OBJECT ? null : value;
	}
	// --------------------

}

start
  = p:property WS* { return p }

property "property"
	= WS* alias:alias? WS* name:name args:args? filters:filter* props:props? { return {
		alias:alias || name,
		name:name,
		args:args || [],
		filters:filters || [],
		props: props || []
	} }

alias "propertyalias"
	= alias:ident WS* ":" { return alias }

name "propertyname"
	= name:ident { return name }

ident
	= $([a-zA-Z_][a-zA-Z0-9_]+)

args "args"
	= "(" WS* ")" { return [] }

op "operator"
	= $(">=" / "<=" / "==" / "!=" / ">" / "<" / "=")

value "value"
	= ident_value / bool_value / string_value / number_value

ident_value
	= v:ident { return {
		type: 'ident',
		value: v
	} }

bool_value
	= v:bool { return {
		type: 'bool',
		value: v
	} }

string_value
	= v:string { return {
		type: 'string',
		value: v
	} }

number_value
	= v:int { return {
		type: 'number',
		value: v
	} }

filter "filter"
	= "." f:(first / take / slice / unique / count / pluck / where / sort / sortBy) { return f }

where "where"
	= "filter(" WS* a:value WS* op:op WS* b:value WS* ")" { return {
		name: "where",
		a: a,
		op: op,
		b: b
	} }

first "first"
	= "first()" {return {
		name: "first",
	} }

take "take"
	= "take(" WS* n:int WS* ")" { return {
		name: "take",
		n: n
	} }

slice "slice"
	= "slice(" WS* start:int WS* "," WS* end:int WS* ")" { return {
		name: "slice",
		start: start,
		end: end
	} }

unique "uniq"
	= "unique()" { return {
		name: "unique"
	} }

count "count"
	= "count()" { return {
		name: "count"
	} }

countBy "countBy"
	= "countBy(" WS* s:ident WS* ")" { return {
		name: "countBy",
		ident: s
	} }

sortBy "sortBy"
	= "sort(" WS* s:ident WS* dir:sortDir? WS* ")" { return {
		name: "sortBy",
		ident: s,
		dir: dir || 'asc'
	} }

sortDir "sortDir"
	= $("desc" / "asc")

sort "sort"
	= "sort(" dir:sortDir? ")" { return {
		name: "sort",
		dir: dir || 'asc'
	} }

pluck "pluck"
	= "pluck(" WS* p:property WS* ")" { p.alias='plucked'; return {
		name: "pluck",
		prop: p
	} }

props "property_list"
	= WS* "{" WS* props:property* WS* "}" { return props }

bool "boolean"
	= b:$("true" / "false") { return b == 'true' }

int "integer"
	= n:$(digit+) { return parseInt(n,10) }

string "string"
	= ["'] s:$([^"']+) ["'] { return s }

digit "digit"
	= [0-9]

WS "whitespace" = [ \t\n\r]
